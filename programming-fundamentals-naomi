// Write a ~1 sentence summary for each one

// DRY
to create code that is easy to maintain and with minimum errors, you should avoid repeating yourself

// KISS
make the code very simple to read

// Avoid creating a YAGNI
Don't create code for features that you won't need

// Do the simplest thing that could possibly work
simplicity in code design is very important. It keeps the code clean


// Don't make me think
You shouldn't write code that is hard to decipher what it's doing

// Write code for the maintainer
This is connected to the DRY and KISS principles where you write code that is easier to read by other people or by you when you come to look at it later

// Single responsibility principle
A component of code such as a class or function should perform only one single well-defined task


// Avoid premature optimization

Don't try to make your code run/upload faster than it is before you've made sure it works. 

// Separation of concerns

this is connected to single responsibility principle where different areas of functionality should be governed by different and minimally overlapping modules of code

// Which ones surprise you (if any)?
none of the principles above surprise me. They all make sense theoretically. 

// Which one is currently giving you the most struggle?

I think I'm currently struggling with keeping my code DRY and writing code for the maintainer. 

const f = l => {
  // a function f is created with a parameter called l
  let es = 0, p = 0, c = 1, n = 0
// console.log(n)
// this line creates four variables. These variables are named es, p, c and n. They are all set to the values of 0 except c which is set to the value of 1

  while (c <= l) {
// a conditional statement where variable c is less than of equal to l

    n = c + p;

    // if c is less than or equal to parameter l then variable n is equal to variable c and p added together
    [c, p] = [n, c]
    // don't really understand what this line is doing
    // There's an array with the values of c and p in it which is equalized to another array with the values of n and c in it
   
    es += (c % 2 === 0) ? c : 0

    // This line seems to be adding the values of even numbers generated by the values in the array of c
  }
  return es

}
console.log(f(55))

//this is a function that returns the sum of all even fibonacci numbers within a given limit
const fibonacciEvenSum = (limit) => {
  let evenSum = 0;
  let previousNum = 0;
  let currentNum = 1;
  while (currentNum <= limit) {
    let nextNum = currentNum + previousNum;
    previousNum = currentNum;
    currentNum = nextNum;
    if (current % 2 === 0) {
      evenSum += currentNum;
    }
  }
  return evenSum;
}


console.log(f2(55))

// In keeping with one of our programming principals (write code for the maintainer): What would have been a more semantic name for this function (hint: this is a problem we had for either lab or hw and is considered a classic ) - are there any other variable names or things that would make this code easier to read and understand?

// If you started a new job and your project was to expand the functionality of this function by allowing a second argument and then based on that second argument, returning the sum of even or odd numbers, which code would you rather start working with f or f2?

// since it's easier to understand, I would rather start working with the F2 code

// Finally, the 'shorter' code style doesn't use semi-colons, except for the fourth line. Remove this semi-colon! Run the code, is this semi-colon necessary?
the semi-colon was necessary otherwise you get an invalid left-hand side in assignement error because of the +
